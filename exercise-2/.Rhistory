1 + 1
x <- 6
# this is a comment
# write a script
hours_in_a_week <- 24 * 7
hours_in_a_week
# write a script
hours_in_a_week <- 24 * 7
# write a script
hours_in_a_week <- 24 * 7
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- total_cost / 1000
Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
#
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Honolulu"
# Assign your name to the variable `my_name`
my_name <- "Allison"
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- total_cost / 1000
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Honolulu"
# Assign your name to the variable `my_name`
my_name <- "Allison"
# Assign your height (in inches) to a variable `my_height`
my_height <- 5 * 12 + 3
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- total_cost / 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- round(1000/puppy_price)
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 100
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
?substr
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
intro
last_letter <- nchar(lyric)
fruits <- substr(lyric, 15, last_letter)
fruits
?gsub
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- sub("a", "e", lyrics)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- sub("a", "e", lyric)
fruits_e
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "e", lyric)
fruits_e
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_e <- gsub("a", "o", lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "e", lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", lyric)
fruits_o
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro
lyric_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro + substr(fruits_e, 15, last_letter)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- c(intro, substr(fruits_e, 15, last_letter))
lyric_e
lyric_e <- c(intro, substr(fruits_e, 15, last_letter))
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, substr(fruits_e, 15, last_letter)))
lyric_e <- cbind(intro, substr(fruits_e, 15, last_letter))
print(lyric_e)
add_three <- function(a) {
a + 3
}
add_three(3)
ten <- add_three(7)
imperial_to_metric <- function(feet, inches) {
total_inches <- feet * 12 + inches
meters <- 0.0254 * total_inches
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 3)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", lyric)
lyric_e <- c(intro, substr(fruits_e, 15, last_letter))
print(lyric_e)
lyric_e <- c(intro, substr(fruits_e, 15, nchar(fruits_e)))
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, substr(fruits_o, 15, nchar(fruits_o)))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, substr(fruits_o, 15, nchar(fruits_o)))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, substr(fruits_o, 15, nchar(fruits_o))))
setwd("C:/Users/allic/Desktop/info201/ch16-shiny/exercise-2")
# Exercise 1: Shiny basics
# Install and load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
numericInput("quantity", label = "Quantity", value = 1, min = 1),
strong("Cost"),
textOutput("cost")
)
# A `titlePanel()` layout with the text "Cost Calculator"
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
# The word "Cost", strongly bolded
# A `textOutput()` output of a calculated value labeled `cost`
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output) {
output$cost <- renderText({
return(paste0("$", input$price * input$quantity))
})
}
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("shiny", "rstudio")
install.packages("shiny")
install.packages("shiny")
# Exercise 1: Shiny basics
# Install and load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
numericInput("quantity", label = "Quantity", value = 1, min = 1),
strong("Cost"),
textOutput("cost")
)
# A `titlePanel()` layout with the text "Cost Calculator"
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
# The word "Cost", strongly bolded
# A `textOutput()` output of a calculated value labeled `cost`
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output) {
output$cost <- renderText({
return(paste0("$", input$price * input$quantity))
})
}
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Exercise 1: Building a user interface
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage(
# A top level header: "First Shiny Website"
h1("First Shiny Website"),
# A Paragraph, describing your excitement: include some `strong` text
p(
"This is my", strong("first"), "shiny project, and I feel..."
),
# An image with this `src`
# https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif
img(
"",
src = "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"
),
# Another paragraph about a slider: include some `em` text
p("I can't wait to get", em("sliders"), "like these to work."),
# A slider with an appropriate label, min of 10, max of 100, value of 50
sliderInput(
inputId = "slider",
label = "My First Slider", min = 0, max = 100, value = 50, step = 10
)
)
# Define a `server` function that accepts an input and an output
# At this point, don't do anything in the function
# This function should perform the following:
server <- function(input, output) {
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
